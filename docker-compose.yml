version: "3.7"

services:
    web:
        image: trada:latest
        container_name: trada
        env_file:
            - .env
        command: python src/main.py 
        restart: always
        logging:
            driver: "json-file"
            options:
                max-size: "200M"
                max-file: "5"
        labels:
            # Enable Traefik for this specific "backend" service
            - traefik.enable=true
            # Define the port inside of the Docker service to use
            - traefik.http.services.web.loadbalancer.server.port=5000
            # Make Traefik use this domain in HTTP
            - traefik.http.routers.web-http.entrypoints=http
            - traefik.http.routers.web-http.rule=Host(`fastapi.localhost`)
            # Use the traefik-public network (declared below)
            - traefik.docker.network=traefik-public
            # Make Traefik use this domain in HTTPS
            - traefik.http.routers.web-https.entrypoints=https
            - traefik.http.routers.web-https.rule=Host(`fastapi.localhost`)
            - traefik.http.routers.web-https.tls=true
            # Use the "le" (Let's Encrypt) resolver
            - traefik.http.routers.web-https.tls.certresolver=le
            # https-redirect middleware to redirect HTTP to HTTPS
            - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
            - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
            # Middleware to redirect HTTP to HTTPS
            - traefik.http.routers.web-http.middlewares=https-redirect
            - traefik.http.routers.web-https.middlewares=admin-auth
            # default user -> user : password
            - traefik.http.middlewares.admin-auth.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/
            # can export username and pass word in termial
            # export USERNAME=admin ; export PASSWORD=changethis; export HASHED_PASSWORD=$(openssl passwd -apr1 $PASSWORD)
            # - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
            # - traefik.http.middlewares.secured.chain.middlewares=https-only,known-ips,auth
            - traefik.http.middlewares.admin-auth.basicauth.headerField=X-WebAuth-User
            - traefik.http.middlewares.admin-auth.basicauth.removeheader=true
        networks:
            # Use the public network created to be shared between Traefik and
            # any other service that needs to be publicly available with HTTPS
            - traefik-public

    traefik:
        image: traefik:v2.4
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - "./acme.json:/acme.json"
            - "./user:/user"
        labels:
             # Enable Traefik for this service, to make it available in the public network
            - traefik.enable=true
            - traefik.http.routers.traefik-dashboard-https.middlewares=traefik-auth
            # Define the port inside of the Docker service to use
            - traefik.http.services.traefik.loadbalancer.server.port=80
            # Make Traefik use this domain in HTTP
            - traefik.http.routers.traefik-http.entrypoints=http
            - traefik.http.routers.traefik-http.rule=Host(`traefik.localhost`)
            # Use the traefik-public network (declared below)
            - traefik.docker.network=traefik-public
            # traefik-https the actual router using HTTPS
            - traefik.http.routers.traefik-https.entrypoints=https
            - traefik.http.routers.traefik-https.rule=Host(`traefik.localhost`)
            - traefik.http.routers.traefik-https.tls=true
            # Use the "le" (Let's Encrypt) resolver created below
            - traefik.http.routers.traefik-https.tls.certresolver=le
            # Use the special Traefik service api@internal with the web UI/Dashboard
            - traefik.http.routers.traefik-https.service=api@internal
            # https-redirect middleware to redirect HTTP to HTTPS
            - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
            - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
            # traefik-http set up only to use the middleware to redirect to https
            - traefik.http.routers.traefik-http.middlewares=https-redirect
            # admin-auth middleware with HTTP Basic auth with default = user: password
            - traefik.http.middlewares.traefik-auth.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/
            # Using the environment variables USERNAME and HASHED_PASSWORD
            # - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set}
            # Enable HTTP Basic auth, using the middleware created above
            - traefik.http.middlewares.secured.chain.middlewares=https-only,known-ips,traefik-auth
            - traefik.http.middlewares.traefik-auth.basicauth.headerField=X-WebAuth-User
            - traefik.http.middlewares.traefik-auth.basicauth.removeheader=true
        command: 
             # Enable Docker in Traefik, so that it reads labels from Docker services
            - --providers.docker
            # Do not expose all Docker services, only the ones explicitly exposed
            - --providers.docker.exposedbydefault=false
            # Create an entrypoint "http" listening on port 80
            - --entrypoints.http.address=:80
            # Create an entrypoint "https" listening on port 443
            - --entrypoints.https.address=:443
            # Create the certificate resolver "le" for Let's Encrypt, uses the environment variable EMAIL
            - --certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
            - --certificatesresolvers.le.acme.email=bvngoc2000@gmail.com
            # Store the Let's Encrypt certificates in the mounted volume
            - --certificatesresolvers.le.acme.storage=/acme.json
            # Use the TLS Challenge for Let's Encrypt
            - --certificatesresolvers.le.acme.tlschallenge=true
            # Enable the access log, with HTTP requests
            - --accesslog
            # Enable the Traefik log, for configurations and errors
            - --log
            # Enable the Dashboard and API
            - --api
        networks:
            - traefik-public

volumes:
    traefik-public-certificates:

networks:
    traefik-public:
        external: true
